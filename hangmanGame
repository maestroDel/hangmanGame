using System.Data;
using System.Numerics;
using System.Reflection.Emit;
using System.Runtime.ConstrainedExecution;
using System.Runtime.Intrinsics.X86;
using System;
using System.Threading.Tasks.Dataflow;
using System.Text.RegularExpressions;

namespace segundo_teste_de_fundamentos
{
    internal class Program
    {

        static int player;
        static int lives;
        static string chosenWord;
        static int charactersLeft;
        static void Main(string[] args)
        {



            multiplayer();



        }


        static string Menu()
        {
            
            string fileName = "";
            Console.WriteLine("1 - portuguÃªs");
            Console.WriteLine("2 - english");
            Console.WriteLine("\n");
            Console.Write("Select a language: ");
            int option = int.Parse(Console.ReadLine());
            do
            {
                if (option == 1)
                {
                    fileName += "pt";
                }
                else if (option == 2)
                {
                    fileName += "en";
                }
                Console.WriteLine("1 - Easy");
                Console.WriteLine("2 - medium");
                Console.WriteLine("3 - hard");
                Console.Write("select the dificulty:");
                int choice = int.Parse(Console.ReadLine());
                do
                {

                    if (choice == 1)
                    {
                        fileName += "easy.txt";


                    }
                    else if (choice == 2)
                    {
                        fileName += "medium.txt";

                    }
                    else if (choice == 3)
                    {
                        fileName += "hard.txt";
                    }

                } while (choice < 1 || choice > 3);

            } while (option < 1 || option > 2);
            return fileName;
        }



        static string RandomWord()
        {
            string r;

            r = File.ReadAllText(Menu());

            string[] a = r.Split('\n');

            Random words = new Random();

            int b = words.Next(0, a.Length);
            chosenWord = a[b];
            return chosenWord;
            

        }


        static void logicgame()
        {
            RandomWord();
            // Regex with valid characters (single character between a and z).
             var validCharacters = new Regex("^[a-z]$");

            // Number of lives the player has before loosing.
            var lives = 7;

            // Empty array that will contain all the letters submitted by the player.
            var letters = new List<string>();
            // Counter of characters left to guess.
            
            // As long as there are lives left, the loop continues
            while (lives != 0 )
            {
                // Counter of characters left to guess.
                var charactersLeft = 0;

                // Loop through all the characters of the word
                foreach (var character in chosenWord)
                {
                    // Make the letter a string (easier for conditions).
                    var letter = character.ToString();

                    // If the letter in the loop is in our array of used letters, we write
                    // the letter, otherwise we show an underscore (as a letter left to
                    // guess).
                    if (letters.Contains(letter))
                    {
                        Console.Write(letter);
                        
                    }
                    else 
                    {
                        // We also increase the count of letters left, used to track whether
                        // the game is finished or not.
                        charactersLeft++;
                        Console.Write("_");
                    }
                    
                    
                }
                    Console.WriteLine(string.Empty);

                

                   Console.Write("Enter a letter: ");
                   char i;
                // Read the input character and transform it to lowercase to make it easier
                // to compare to already used letters (we could fall into the scenario of a
                // player inputting a capitalized letter that has already been submitted). 
                  var key = Console.ReadKey().Key.ToString().ToLower();
                  Console.WriteLine(string.Empty);
                  i = Console.ReadKey().KeyChar;
                // Using the declared Regex above, we check if the the submitted character
                // is valid or not.
                if (!validCharacters.IsMatch(key))
                {
                    // If the character is invalid, we loop back to the beginning using the
                    // "continue" statement and let the user know of the error.
                    Console.WriteLine($"The letter {key}  is invalid. Try a key letter.");
                    continue;
                }

                // Is the letter already in our array of used letters? 
                if (letters.Contains(key))
                {
                    // Only show a message to the user that the letter has already been
                    // used. We don't want to do anything else (for example storing it)
                    // with that.
                    Console.WriteLine("Letter already used (press ENTER to try again)");
                    continue;
                }

                // If the letter has not already been used, we add it to our array of
                // letters.
                letters.Add(key);

                // If the chosen word doesn't contain the given letter, we reduce the
                // number of lives left by one.
                if (!chosenWord.Contains(key))
                {
                     showhang(lives);
                    lives--;
                   

                    // If all the lives ran out, there's no point saying how many lives
                    // are left as the loose message will be shown.
                    if (lives > 0)
                    {
                        // Here, a ternary is used in the string to either how a pluralized
                        // version of "try" or the singular one, depending on how many
                        // lives are left.
                        Console.WriteLine($"The letter {key} is not in the word. You have {lives} {(lives == 1 ? "try" : "tries")} left.");
                    }
                    
                }
                
                
                // If there are no characters left, the game is over and we can break out
                // of the loop.
                if (charactersLeft == 0)
                {
                    break;
                }


            }

            // If the user has lives left, we display the win message, otherwise we don't
            if (lives > 0)
            {
                // This uses a ternary to pluralize the word lives unless there only one
                // life left.
                Console.WriteLine($" You won with {lives} {(lives == 1 ? "life" : "lives")} left!");
                return;
            }
            else
            {
                Console.WriteLine($" You lost! The word was {chosenWord}.");
                return;
            }


        }
        static void showhang(int lives)
        {
            switch (lives)
            {
                
                case 7:
                    Console.WriteLine("-------");
                    Console.WriteLine("|");
                    Console.WriteLine("|");
                    Console.WriteLine("|");
                    Console.WriteLine("|");
                    Console.WriteLine("|");
                    Console.WriteLine("----");
                    break;
                case 6:
                    Console.WriteLine("-------");
                    Console.WriteLine("|    |");
                    Console.WriteLine("|");
                    Console.WriteLine("|");
                    Console.WriteLine("|");
                    Console.WriteLine("|");
                    Console.WriteLine("----");
                    break;
                case 5:
                    Console.WriteLine("-------");
                    Console.WriteLine("|    |");
                    Console.WriteLine("|    O");
                    Console.WriteLine("|");
                    Console.WriteLine("|");
                    Console.WriteLine("|");
                    Console.WriteLine("----");
                    break;
                case 4:
                    Console.WriteLine("-------");
                    Console.WriteLine("|    |");
                    Console.WriteLine("|    O");
                    Console.WriteLine("|   /|");
                    Console.WriteLine("|");
                    Console.WriteLine("|");
                    Console.WriteLine("----");
                    break;
                case 3:
                    Console.WriteLine("-------");
                    Console.WriteLine("|    |");
                    Console.WriteLine("|    O");
                    Console.WriteLine("|   /|\\");
                    Console.WriteLine("|");
                    Console.WriteLine("|");
                    Console.WriteLine("----");
                    break;
                case 2:
                    Console.WriteLine("-------");
                    Console.WriteLine("|    |");
                    Console.WriteLine("|    O");
                    Console.WriteLine("|   /|\\");
                    Console.WriteLine("|   / ");
                    Console.WriteLine("|");
                    Console.WriteLine("----");
                    break;
                case 1:
                    Console.WriteLine("-------");
                    Console.WriteLine("|    |");
                    Console.WriteLine("|    O");
                    Console.WriteLine("|   /|\\");
                    Console.WriteLine("|   / \\");
                    Console.WriteLine("|");
                    Console.WriteLine("----");
                    break;
            }

        }

        static void multiplayer()
        {
            
            
            Console.WriteLine("0. Quit");
            Console.WriteLine("1. Single player");
            Console.WriteLine("2. Two players");
            Console.Write("select the Game Mode: ");
            int option = int.Parse(Console.ReadLine());

            if(option == 0)
            {
                return;
            }
            else if (option == 1)
            {
                
                logicgame();
            }
            else if (option == 2)
            {
                RandomWord();
                do
                {

                    Console.Clear();
                    Console.WriteLine("Player 1 and Player 2");
                    Console.WriteLine("\n");
                    logicgame();
                    if (player % 2 == 0)
                    {
                        player2();
                    }
                    else
                    {
                        player1();
                    }

                    Console.WriteLine("\n");

                } while (lives != 0 || charactersLeft != 0);
            }

        }
        static void wordsused()
        {

            var letter = Console.ReadLine();
            string lU = "";

            if (lU.Contains(letter))
            {
                Console.Write("Letter already used: " + lU + letter);
            }
            else
            {
                Console.WriteLine("Letters already used: ", lU += letter);
            }
        }
       public static void twoplayers(int lives, int charactersLeft)
        {
            RandomWord();
            do
            {
                
                Console.Clear();
                Console.WriteLine("Player 1 and Player 2");
                Console.WriteLine("\n");
                logicgame();
                if (player % 2 == 0)
                {
                    player2();
                }
                else
                {
                    player1();
                }

                Console.WriteLine("\n");

            } while (lives != 0 || charactersLeft != 0);


           
        }
       public static void player1()
        {
            RandomWord();
            // Regex with valid characters (single character between a and z).
            var validCharacters = new Regex("^[a-z]$");

            // Number of lives the player has before loosing.
            var lives = 7;

            // Empty array that will contain all the letters submitted by the player.
            var letters = new List<string>();
            // Counter of characters left to guess.

            // As long as there are lives left, the loop continues
            while (lives != 0)
            {
                // Counter of characters left to guess.
                var charactersLeft = 0;

                // Loop through all the characters of the word
                foreach (var character in chosenWord)
                {
                    // Make the letter a string (easier for conditions).
                    var letter = character.ToString();

                    // If the letter in the loop is in our array of used letters, we write
                    // the letter, otherwise we show an underscore (as a letter left to
                    // guess).
                    if (letters.Contains(letter))
                    {
                        Console.Write(letter);

                    }
                    else
                    {
                        // We also increase the count of letters left, used to track whether
                        // the game is finished or not.
                        charactersLeft++;
                        Console.Write("_");
                    }


                }
                Console.WriteLine(string.Empty);



                Console.Write("(Player 1) Enter a letter: ");
                char i;
                // Read the input character and transform it to lowercase to make it easier
                // to compare to already used letters (we could fall into the scenario of a
                // player inputting a capitalized letter that has already been submitted). 
                var key = Console.ReadKey().Key.ToString().ToLower();
                Console.WriteLine(string.Empty);
                i = Console.ReadKey().KeyChar;
                // Using the declared Regex above, we check if the the submitted character
                // is valid or not.
                if (!validCharacters.IsMatch(key))
                {
                    // If the character is invalid, we loop back to the beginning using the
                    // "continue" statement and let the user know of the error.
                    Console.WriteLine($"The letter {key}  is invalid. Try a key letter.");
                    continue;
                }

                // Is the letter already in our array of used letters? 
                if (letters.Contains(key))
                {
                    // Only show a message to the user that the letter has already been
                    // used. We don't want to do anything else (for example storing it)
                    // with that.
                    Console.WriteLine("Letter already used (press ENTER to try again)");
                    continue;
                }

                // If the letter has not already been used, we add it to our array of
                // letters.
                letters.Add(key);

                // If the chosen word doesn't contain the given letter, we reduce the
                // number of lives left by one.
                if (!chosenWord.Contains(key))
                {
                    showhang(lives);
                    lives--;


                    // If all the lives ran out, there's no point saying how many lives
                    // are left as the loose message will be shown.
                    if (lives > 0)
                    {
                        // Here, a ternary is used in the string to either how a pluralized
                        // version of "try" or the singular one, depending on how many
                        // lives are left.
                        Console.WriteLine($"The letter {key} is not in the word. You have {lives} {(lives == 1 ? "try" : "tries")} left.");
                    }

                }


                // If there are no characters left, the game is over and we can break out
                // of the loop.
                if (charactersLeft == 0)
                {
                    break;
                }


            }

            // If the user has lives left, we display the win message, otherwise we don't
            if (lives > 0)
            {
                // This uses a ternary to pluralize the word lives unless there only one
                // life left.
                Console.WriteLine($" Player 1 won with {lives} {(lives == 1 ? "life" : "lives")} left!");
                return;
            }
            else
            {
                Console.WriteLine($" Player 1 lost! The word was {chosenWord}.");
                return;
            }
        }
       public static void player2()
        {
            RandomWord();
            // Regex with valid characters (single character between a and z).
            var validCharacters = new Regex("^[a-z]$");

            // Number of lives the player has before loosing.
            var lives = 7;

            // Empty array that will contain all the letters submitted by the player.
            var letters = new List<string>();
            // Counter of characters left to guess.

            // As long as there are lives left, the loop continues
            while (lives != 0)
            {
                // Counter of characters left to guess.
                var charactersLeft = 0;

                // Loop through all the characters of the word
                foreach (var character in chosenWord)
                {
                    // Make the letter a string (easier for conditions).
                    var letter = character.ToString();

                    // If the letter in the loop is in our array of used letters, we write
                    // the letter, otherwise we show an underscore (as a letter left to
                    // guess).
                    if (letters.Contains(letter))
                    {
                        Console.Write(letter);

                    }
                    else
                    {
                        // We also increase the count of letters left, used to track whether
                        // the game is finished or not.
                        charactersLeft++;
                        Console.Write("_");
                    }


                }
                Console.WriteLine(string.Empty);



                Console.Write("(Player 2) Enter a letter: ");
                char i;
                // Read the input character and transform it to lowercase to make it easier
                // to compare to already used letters (we could fall into the scenario of a
                // player inputting a capitalized letter that has already been submitted). 
                var key = Console.ReadKey().Key.ToString().ToLower();
                Console.WriteLine(string.Empty);
                i = Console.ReadKey().KeyChar;
                // Using the declared Regex above, we check if the the submitted character
                // is valid or not.
                if (!validCharacters.IsMatch(key))
                {
                    // If the character is invalid, we loop back to the beginning using the
                    // "continue" statement and let the user know of the error.
                    Console.WriteLine($"The letter {key}  is invalid. Try a key letter.");
                    continue;
                }

                // Is the letter already in our array of used letters? 
                if (letters.Contains(key))
                {
                    // Only show a message to the user that the letter has already been
                    // used. We don't want to do anything else (for example storing it)
                    // with that.
                    Console.WriteLine("Letter already used (press ENTER to try again)");
                    continue;
                }

                // If the letter has not already been used, we add it to our array of
                // letters.
                letters.Add(key);

                // If the chosen word doesn't contain the given letter, we reduce the
                // number of lives left by one.
                if (!chosenWord.Contains(key))
                {
                    showhang(lives);
                    lives--;


                    // If all the lives ran out, there's no point saying how many lives
                    // are left as the loose message will be shown.
                    if (lives > 0)
                    {
                        // Here, a ternary is used in the string to either how a pluralized
                        // version of "try" or the singular one, depending on how many
                        // lives are left.
                        Console.WriteLine($"The letter {key} is not in the word. You have {lives} {(lives == 1 ? "try" : "tries")} left.");
                    }

                }


                // If there are no characters left, the game is over and we can break out
                // of the loop.
                if (charactersLeft == 0)
                {
                    break;
                }


            }

            // If the user has lives left, we display the win message, otherwise we don't
            if (lives > 0)
            {
                // This uses a ternary to pluralize the word lives unless there only one
                // life left.
                Console.WriteLine($" player 2 won with {lives} {(lives == 1 ? "life" : "lives")} left!");
                return;
            }
            else
            {
                Console.WriteLine($" player 2 lost! The word was {chosenWord}.");
                return;
            }
        }
    }
}
